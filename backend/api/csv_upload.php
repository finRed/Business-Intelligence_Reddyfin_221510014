<?php
// This file is now included by employees.php and doesn't need headers or auth checks

class CSVUploadProcessor {
    private $pdo;
    private $logs = [];
    private $divisions = [];
    
    public function __construct() {
        $this->pdo = getDbConnection();
        $this->loadExistingDivisions();
    }
    
    private function loadExistingDivisions() {
        $stmt = $this->pdo->query("SELECT division_id, division_name FROM divisions");
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $this->divisions[strtoupper($row['division_name'])] = $row['division_id'];
        }
    }
    
    private function log($message, $type = 'info') {
        $this->logs[] = [
            'timestamp' => date('H:i:s'),
            'message' => $message,
            'type' => $type
        ];
    }
    
    public function processCSV($filePath) {
        $this->log("Memulai pemrosesan CSV: " . basename($filePath));
        
        $results = [
            'summary' => [
                'total_processed' => 0,
                'successful' => 0,
                'warnings' => 0,
                'errors' => 0,
                'skipped' => 0
            ],
            'details' => [],
            'logs' => &$this->logs
        ];
        
        try {
            $handle = fopen($filePath, 'r');
            if (!$handle) {
                throw new Exception("Tidak dapat membuka file CSV");
            }
            
            // Skip header dan empty line
            $headers = fgetcsv($handle, 0, ';');
            $emptyLine = fgetcsv($handle, 0, ';');
            
            $this->log("Header CSV dibaca, memulai pemrosesan data");
            $lineNumber = 3; // Start from line 3 (after header and empty line)
            
            while (($data = fgetcsv($handle, 0, ';')) !== FALSE) {
                if (empty(array_filter($data))) {
                    $lineNumber++;
                    continue; // Skip empty lines
                }
                
                $results['summary']['total_processed']++;
                $employeeResult = $this->processEmployeeRow($data, $lineNumber);
                $results['details'][] = $employeeResult;
                
                switch ($employeeResult['status']) {
                    case 'success':
                        $results['summary']['successful']++;
                        break;
                    case 'warning':
                        $results['summary']['warnings']++;
                        break;
                    case 'error':
                        $results['summary']['errors']++;
                        break;
                    case 'skipped':
                        $results['summary']['skipped']++;
                        break;
                }
                
                $lineNumber++;
            }
            
            fclose($handle);
            $this->log("Pemrosesan CSV selesai");
            
        } catch (Exception $e) {
            $this->log("Error: " . $e->getMessage(), 'error');
            throw $e;
        }
        
        return $results;
    }
    
    private function processEmployeeRow($data, $lineNumber) {
        $result = [
            'line_number' => $lineNumber,
            'status' => 'success',
            'message' => '',
            'warnings' => [],
            'eid' => '',
            'name' => '',
            'division' => '',
            'division_created' => false,
            'contract_info' => null,
            'early_resign' => false,
            'resign_date' => null,
            'original_eid' => ''
        ];
        
        try {
            // Parse CSV columns based on header structure
            $csvData = $this->parseCSVRow($data);
            $result['name'] = $csvData['name'];
            $result['original_eid'] = $csvData['eid'];
            $result['resign_date'] = $csvData['resign_date'];
            
            // Filter out Graduate Development Program
            if (!empty($csvData['designation']) && 
                stripos($csvData['designation'], 'graduate development program') !== false) {
                $result['status'] = 'skipped';
                $result['message'] = 'Dilewati: Graduate Development Program tidak dimasukkan';
                $this->log("Skipping Graduate Development Program: " . $csvData['name']);
                return $result;
            }
            
            // 1. EID will be auto-generated by database
            
            // 2. Process Division (Auto-create if not exists)
            $divisionId = $this->processDivision($csvData['division']);
            if ($divisionId['created']) {
                $result['division_created'] = true;
                $result['warnings'][] = "Divisi baru dibuat: " . $csvData['division'];
            }
            $result['division'] = $csvData['division'];
            
            // 3. Validate join_date (required field)
            if (empty($csvData['join_date'])) {
                $result['status'] = 'error';
                $result['message'] = "Join date tidak boleh kosong atau format tidak valid. Data mentah: '" . ($data[4] ?? 'kosong') . "'";
                $this->log("Join date kosong/invalid untuk: " . $csvData['name'] . ", data mentah: '" . ($data[4] ?? 'kosong') . "'", 'error');
                return $result;
            }
            
            // 4. Validate and format birth date
            $birthDate = $this->formatBirthDate($csvData['birth_date']);
            if (!$birthDate) {
                $result['warnings'][] = "Format birth date tidak valid: " . $csvData['birth_date'];
            }
            
            // 5. Check for existing employee (by name and email)
            $existingEmployee = $this->findExistingEmployee($csvData['name'], $csvData['email']);
            
            if ($existingEmployee) {
                // Update existing employee
                $employeeId = $existingEmployee['eid'];
                $this->updateEmployee($employeeId, [
                    'name' => $csvData['name'],
                    'role' => $csvData['designation'], // Designation -> Role
                    'division_id' => $divisionId['id'],
                    'major' => $csvData['major'], // Major -> Jurusan
                    'education_level' => $csvData['education_level'],
                    'birth_date' => $birthDate,
                    'join_date' => $csvData['join_date'],
                    'resign_date' => $csvData['resign_date'],
                    'email' => $csvData['email'],
                    'status' => $csvData['active_status'] === 'Active' ? 'active' : 'resigned'
                ]);
                
                $result['message'] = "Data karyawan diperbarui";
                $result['updated'] = true;
            } else {
                // Insert new employee (status will be updated after contract processing)
                $employeeId = $this->insertEmployee([
                'name' => $csvData['name'],
                'role' => $csvData['designation'], // Designation -> Role
                'division_id' => $divisionId['id'],
                'major' => $csvData['major'], // Major -> Jurusan
                'education_level' => $csvData['education_level'],
                'birth_date' => $birthDate,
                'join_date' => $csvData['join_date'],
                'resign_date' => $csvData['resign_date'],
                'email' => $csvData['email'],
                'status' => 'pending' // Temporary status, will be updated after contract processing
            ]);
            
                // Store the auto-generated EID for result
                $result['eid'] = $employeeId;
            
                $result['message'] = "Berhasil diproses";
            }
            
            // 6. Process Contracts with Early Resign Detection
            $contractInfo = $this->processContracts($employeeId, $csvData);
            $result['contract_info'] = $contractInfo;
            $result['early_resign'] = $contractInfo['early_resign'];
            
            // 7. Update employee status based on contract determination
            $finalStatus = $this->determineEmployeeStatus($csvData, $contractInfo);
            $this->updateEmployeeStatus($employeeId, $finalStatus);
            
            if (count($result['warnings']) > 0) {
                $result['status'] = 'warning';
            }
            
        } catch (Exception $e) {
            $result['status'] = 'error';
            $result['message'] = $e->getMessage();
            $this->log("Error processing line $lineNumber: " . $e->getMessage(), 'error');
        }
        
        return $result;
    }
    
    private function parseCSVRow($data) {
        // Map CSV columns to our structure
        return [
            'no' => $data[0] ?? '',
            'eid' => $data[1] ?? '',
            'name' => $data[2] ?? '',
            'active_status' => $data[3] ?? '',
            'join_date' => $this->formatDate($data[4] ?? ''),
            'resign_date' => $this->formatDate($data[5] ?? ''),
            'years_of_service' => $data[6] ?? '',
            'status_working' => $data[7] ?? '',
            'permanent_date' => $this->formatDate($data[8] ?? ''),
            'contract_prob_end' => $this->formatDate($data[9] ?? ''),
            'contract_1st_expired' => $this->formatDate($data[10] ?? ''),
            'contract_2nd_expired' => $this->formatDate($data[11] ?? ''),
            'contract_3rd_expired' => $this->formatDate($data[12] ?? ''),
            'three_month_review' => $this->formatDate($data[13] ?? ''),
            'level_grade' => $data[14] ?? '',
            'designation' => $data[16] ?? '', // Role
            'division' => $data[17] ?? '',
            'gender' => $data[18] ?? '',
            'birth_place' => $data[19] ?? '',
            'birth_date' => $data[20] ?? '',
            'age' => $data[21] ?? '',
            'religion' => $data[22] ?? '',
            'nationality' => $data[23] ?? '',
            'email' => $data[24] ?? '',
            'education_level' => $data[25] ?? '',
            'last_education_place' => $data[26] ?? '',
            'major' => $data[27] ?? '', // Jurusan
            'reason_resign' => $data[28] ?? '',
            'referral' => $data[29] ?? ''
        ];
    }
    

    
    private function processDivision($divisionName) {
        if (empty($divisionName)) {
            $divisionName = 'General';
        }
        
        $divisionKey = strtoupper($divisionName);
        
        if (isset($this->divisions[$divisionKey])) {
            return [
                'id' => $this->divisions[$divisionKey],
                'created' => false
            ];
        }
        
        // Create new division
        $stmt = $this->pdo->prepare("INSERT INTO divisions (division_name, description) VALUES (?, ?)");
        $stmt->execute([$divisionName, "Auto-created from CSV upload"]);
        $divisionId = $this->pdo->lastInsertId();
        
        // Add to cache
        $this->divisions[$divisionKey] = $divisionId;
        
        $this->log("Created new division: $divisionName");
        
        return [
            'id' => $divisionId,
            'created' => true
        ];
    }
    
    private function formatDate($dateString) {
        if (empty($dateString) || $dateString === '-' || $dateString === 'NULL' || strtoupper($dateString) === 'NULL') {
            return null;
        }
        
        // Handle various date formats
        $dateString = trim($dateString);
        
        // Try different date formats
        $formats = [
            'd-M-y',    // 1-Aug-18
            'd-M-Y',    // 1-Aug-2018
            'd/m/Y',    // 01/08/2018
            'm/d/Y',    // 08/01/2018  
            'Y-m-d',    // 2018-08-01
            'd-m-Y',    // 01-08-2018
            'm-d-Y',    // 08-01-2018
            'Y/m/d',    // 2018/08/01
            'j/n/Y',    // 1/8/2018 (single digits)
            'n/j/Y',    // 8/1/2018 (single digits)
            'j-n-Y',    // 1-8-2018 (single digits)
            'n-j-Y'     // 8-1-2018 (single digits)
        ];
        
        foreach ($formats as $format) {
            $date = DateTime::createFromFormat($format, $dateString);
            if ($date && $date->format($format) === $dateString) {
                return $date->format('Y-m-d');
            }
        }
        
        // Try with strtotime as fallback
        $timestamp = strtotime($dateString);
        if ($timestamp !== false) {
            return date('Y-m-d', $timestamp);
        }
        
        return null;
    }
    
    private function formatBirthDate($birthDateString) {
        if (empty($birthDateString) || $birthDateString === '-') {
            return null;
        }
        
        // Handle birth date format like "4-Feb-64"
        $dateString = trim($birthDateString);
        
        $formats = [
            'd-M-y',    // 4-Feb-64
            'd-M-Y',    // 4-Feb-1964
            'd/m/Y',    // 04/02/1964
            'Y-m-d',    // 1964-02-04
            'd-m-Y'     // 04-02-1964
        ];
        
        foreach ($formats as $format) {
            $date = DateTime::createFromFormat($format, $dateString);
            if ($date) {
                // Handle 2-digit years
                if ($format === 'd-M-y') {
                    $year = $date->format('Y');
                    if ($year > date('Y')) {
                        $date->modify('-100 years');
                    }
                }
                return $date->format('Y-m-d');
            }
        }
        
        return null;
    }
    

    
    private function findExistingEmployee($name, $email) {
        $sql = "SELECT eid, name, email FROM employees WHERE name = :name OR email = :email";
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute(['name' => $name, 'email' => $email]);
        return $stmt->fetch();
    }
    
    private function updateEmployee($employeeId, $data) {
        // First, delete existing contracts for this employee to avoid duplicates
        $deleteSql = "DELETE FROM contracts WHERE eid = :eid";
        $deleteStmt = $this->pdo->prepare($deleteSql);
        $deleteStmt->execute(['eid' => $employeeId]);
        
        $sql = "UPDATE employees SET 
            name = :name, role = :role, division_id = :division_id, 
            major = :major, education_level = :education_level,
            birth_date = :birth_date, join_date = :join_date, 
            resign_date = :resign_date, email = :email, status = :status,
            updated_at = CURRENT_TIMESTAMP
            WHERE eid = :eid";
        
        $data['eid'] = $employeeId;
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute($data);
    }
    
    private function insertEmployee($data) {
        $sql = "INSERT INTO employees (
            name, role, division_id, major, education_level, 
            birth_date, join_date, resign_date, email, status
        ) VALUES (
            :name, :role, :division_id, :major, :education_level,
            :birth_date, :join_date, :resign_date, :email, :status
        )";
        
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute($data);
        
        return $this->pdo->lastInsertId();
    }
    
    private function processContracts($employeeId, $csvData) {
        $contracts = [];
        $earlyResign = false;
        $lastContractType = null;
        $lastContractEndDate = null;
        
        // Rule 1: If JOIN DATE is filled, initial status is "Probation"
        if (empty($csvData['join_date'])) {
            // No JOIN DATE, can't determine contract status
            return [
                'total_contracts' => 0,
                'contract_types' => [],
                'current_type' => null,
                'early_resign' => false
            ];
        }
        
        // 1. Always create probation contract (3 months from JOIN DATE)
        $probationStart = $csvData['join_date'];
        $probationEnd = date('Y-m-d', strtotime($probationStart . ' +3 months -1 day'));
        
        // Determine probation status
        $probationStatus = 'completed';
        $currentDate = date('Y-m-d');
        
        // Check if employee resigned during probation
        if ($csvData['resign_date'] && $csvData['resign_date'] <= $probationEnd) {
            $earlyResign = true;
            $probationStatus = 'terminated';
        } else if (empty($csvData['resign_date']) && $currentDate <= $probationEnd) {
            // Still in probation period and no resign date
            $probationStatus = 'active';
        }
        
        $this->insertContract($employeeId, [
            'type' => 'probation',
            'start_date' => $probationStart,
            'end_date' => $probationEnd,
            'status' => $probationStatus
        ]);
        
        $contracts[] = 'probation';
        $lastContractType = 'probation';
        $lastContractEndDate = $probationEnd;
        
        // 2. Process Contract 2nd if CONTRACT EXPIRED (2nd Contract) has value
        if (!empty($csvData['contract_2nd_expired'])) {
            $contract2ndStart = date('Y-m-d', strtotime($probationEnd . ' +1 day'));
            $contract2ndEnd = $csvData['contract_2nd_expired'];
            
            $contract2ndStatus = 'completed';
            
            // Check if employee resigned during contract 2nd
            if ($csvData['resign_date'] && $csvData['resign_date'] <= $contract2ndEnd) {
                if ($csvData['resign_date'] < $contract2ndEnd) {
                    $earlyResign = true;
                }
                $contract2ndStatus = 'terminated';
            } else if (empty($csvData['resign_date']) && $currentDate <= $contract2ndEnd) {
                // Still in contract 2nd period and no resign date
                $contract2ndStatus = 'active';
            }
            
            $this->insertContract($employeeId, [
                'type' => '2',
                'start_date' => $contract2ndStart,
                'end_date' => $contract2ndEnd,
                'status' => $contract2ndStatus
            ]);
            
            $contracts[] = '2';
            $lastContractType = '2';
            $lastContractEndDate = $contract2ndEnd;
        }
        
        // 3. Process Contract 3rd if CONTRACT EXPIRED (3rd Contract) has value
        if (!empty($csvData['contract_3rd_expired'])) {
            // Contract 3rd can only exist if there was a contract 2nd
            if (!empty($csvData['contract_2nd_expired'])) {
                $contract3rdStart = date('Y-m-d', strtotime($lastContractEndDate . ' +1 day'));
                $contract3rdEnd = $csvData['contract_3rd_expired'];
                
                $contract3rdStatus = 'completed';
                
                // Check if employee resigned during contract 3rd
                if ($csvData['resign_date'] && $csvData['resign_date'] <= $contract3rdEnd) {
                    if ($csvData['resign_date'] < $contract3rdEnd) {
                        $earlyResign = true;
                    }
                    $contract3rdStatus = 'terminated';
                } else if (empty($csvData['resign_date']) && $currentDate <= $contract3rdEnd) {
                    // Still in contract 3rd period and no resign date
                    $contract3rdStatus = 'active';
                }
                
                $this->insertContract($employeeId, [
                    'type' => '3',
                    'start_date' => $contract3rdStart,
                    'end_date' => $contract3rdEnd,
                    'status' => $contract3rdStatus
                ]);
                
                $contracts[] = '3';
                $lastContractType = '3';
                $lastContractEndDate = $contract3rdEnd;
            }
        }
        
        // 4. Check for permanent status if PERMANENTDATE has value
        if (!empty($csvData['permanent_date'])) {
            $permanentStart = $csvData['permanent_date'];
            $permanentStatus = 'active';
            
            // Check if employee resigned after becoming permanent
            if ($csvData['resign_date'] && $csvData['resign_date'] >= $permanentStart) {
                $permanentStatus = 'completed';
                // For permanent employees, resignation is normal, not early
            }
            
            $this->insertContract($employeeId, [
                'type' => 'permanent',
                'start_date' => $permanentStart,
                'end_date' => null,
                'status' => $permanentStatus
            ]);
            
            $contracts[] = 'permanent';
            $lastContractType = 'permanent';
        }
        
        // 5. Final status determination
        // If RESIGN DATE is empty, employee is still active and follows last contract type
        // Don't set status as "no contract" if RESIGN DATE is empty
        if (empty($csvData['resign_date'])) {
            // Employee is still active, determine current contract status
            if ($lastContractType === 'permanent') {
                // Already handled above
            } else if ($lastContractType === 'probation' && $currentDate <= $probationEnd) {
                // Still in probation
            } else if ($lastContractType === '2' && !empty($csvData['contract_2nd_expired']) && $currentDate <= $csvData['contract_2nd_expired']) {
                // Still in contract 2nd
            } else if ($lastContractType === '3' && !empty($csvData['contract_3rd_expired']) && $currentDate <= $csvData['contract_3rd_expired']) {
                // Still in contract 3rd
            } else {
                // Employee is active but contract has expired - they continue with last contract type
                // This means they should be considered for permanent conversion or contract renewal
            }
        }
        
        return [
            'total_contracts' => count($contracts),
            'contract_types' => $contracts,
            'current_type' => $lastContractType,
            'early_resign' => $earlyResign
        ];
    }
    
    private function insertContract($employeeId, $contractData) {
        $sql = "INSERT INTO contracts (
            eid, type, start_date, end_date, status
        ) VALUES (
            :eid, :type, :start_date, :end_date, :status
        )";
        
        $contractData['eid'] = $employeeId;
        
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute($contractData);
    }
    
    private function determineEmployeeStatus($csvData, $contractInfo) {
        // If employee has resign date, they are resigned
        if (!empty($csvData['resign_date'])) {
            return 'resigned';
        }
        
        // If no resign date, employee is active
        // Status follows the current contract type
        if ($contractInfo['current_type']) {
            return 'active';
        }
        
        // Fallback - if no contract info but no resign date, consider active
        return 'active';
    }
    
    private function updateEmployeeStatus($employeeId, $status) {
        $sql = "UPDATE employees SET status = :status WHERE eid = :eid";
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute([
            'status' => $status,
            'eid' => $employeeId
        ]);
    }
}

// CSV processing class is now used by employees.php via handleCSVUpload function
?> 